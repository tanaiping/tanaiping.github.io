面试资料以及工作中实用的内容

css3 新特性
1.transition
2.animation
3.transform
4.选择器  nth-child(n) last-child  nth-last-child(n)
5. box-shadow
6.边框  border-image
7.背景  background-clip:border-box  padding-box
8.文字  word-break
9 颜色  rgba   rgb为颜色值，a为透明度
10 渐变
11. flex 弹性布局
12 grid 栅格布局 
13 盒子定义 box-sizing: border-box  padding-box
14 媒体查询  @media

Css3新特性
1.过渡 transition
2.动画 animation
3.形状转换 transform
4.阴影 box-shadow
5.滤镜 Filter
6.颜色 rgba
7.栅格布局 gird
8.弹性布局 flex

ES6 新特性

变量定义：let Const
箭头函数(
不适用场景  
1.构造函数；
2.需要绑定到dom的时候
3 需要使用arguments
)
imoprt模块导入
${} 变量拼接
解构赋值   let arr = [1,2,3]; const [x,y,z] = arr; console.log(${x}${y}${z})
对象写法精简
obj{
	get,
}
for...of..循环


扩展运算符  (放在赋值一方)
拼接数组  将对象插入到另一个对象 
let arr1 = [1,2,3]
let arr2 = [...arr1,4,5,6]

obj1 ={a:1,b:2}
obj2 = {
	...obj1,
	c:3,d:4
}

剩余运算符 (放在被赋值一方)
1.当函数参数个数不确定时  用剩余运算符
function aaa(...tem)  ===》 console.log(tem) ==>[2,3,4]
aaa(1,2,3,4)

Symbol数据类型
Set 和 Map 数据结构
set 存储无重复的有序列表的对象 
Set内部使用Object.is()方法来判断两个数据项是否相等，唯一不同的是+0和-0在Set中被判断为是相等的。

 add()添加元素 has() 判断是否存在某个值 delete()删除某个值  clear()删除所有值
 set.forEach(value,key,item)     set的forEach  value 和 key的值是一样的。 但是三个参数必须一定要有； 
  set对象转数组   
  let set = new Set([1,2,3,3,4,5])  //set[1,2,3]
  let [...arr] = set
  
  
  Set在存放对象时，实际上是存放的是对象的引用，即Set也被称之为Strong Set。如果所存储的对象被置为null，但是Set实例仍然存在的话，对象依然无法被垃圾回收器回收，从而无法释放内存：
  
  
  let set = new Set();
  let key={};
  let key2 = {};
  set.add(key);
  set.add(key2);
  console.log(set.size); //2
  
  key=null;
  console.log(set.size); //2
  
  对于Weak Set和Set之间的重要差异：
  
  对于Weak Set实例，若调用了add()方法时传入了非对象的参数，则会抛出错误。如果在has()或者delete()方法中传入了非对象的参数则会返回false；
  Weak Set不可迭代，因此不能用于for-of循环；
  Weak Set 无法暴露出任何迭代器（例如 keys() 与 values() 方法） ，因此没有任何编程手段可用于判断 Weak Set 的内容；
  Weak Set没有forEach()方法；
  Weak Set没有size属性；
  
  
  ES6中的Map
  ES6中提供了Map数据结构，能够存放键值对，其中，键的去重是通过Object.is()方法进行比较，键的数据类型可以是基本类型数据也可以是对象，而值也可以是任意类型数据。
  使用set()方法可以给Map添加键值对
  
   let map = new Map();
   map.set('title','hello world');
   map.set('year','2018');
   
   console.log(map.size); //2
  
  通过get()方法可以从Map中提取值  console.log(map.get('title'));
  has(),delete()以及clear()方法
  
  Map的初始化
  
  与Set的初始化一样，Map也可以用数组来初始化Map，该数组中的每一个数据项也是数组，数组的第一个数据项代表键值对的键，第二个数据项是键值对的值：
  
  //使用数组来创建Map
  let map = new Map([['title','hello world'],['year','2018']]);
  console.log(map.has('title')); //true
  console.log(map.has('year')); //true
  console.log(map.size); //2
  
  
  4. 总结
  Set 是无重复值的有序列表。根据 Object.is()方法来判断其中的值不相等，以保证无重复。 Set 会自动移除重复的值，因此你可以使用它来过滤数组中的重复值并返回结果。 Set并不是数组的子类型，所以你无法随机访问其中的值。但你可以使用has() 方法来判断某个值是否存在于 Set 中，或通过 size 属性来查看其中有多少个值。 Set 类型还拥有forEach()方法，用于处理每个值。
  
  Weak Set 是只能包含对象的特殊 Set 。其中的对象使用弱引用来存储，意味着当 Weak Set中的项是某个对象的仅存引用时，它不会屏蔽垃圾回收。由于内存管理的复杂性， Weak Set的内容不能被检查，因此最好将 Weak Set 仅用于追踪需要被归组在一起的对象。
  
  Map 是有序的键值对，其中的键允许是任何类型。与 Set 相似，通过调用 Object.is()方法来判断重复的键，这意味着能将数值 5 与字符串 "5" 作为两个相对独立的键。使用set() 方法能将任何类型的值关联到某个键上，并且该值此后能用 get() 方法提取出来。Map 也拥有一个 size 属性与一个 forEach() 方法，让项目访问更容易。
  
  Weak Map 是只能包含对象类型的键的特殊 Map 。与 Weak Set 相似，键的对象引用是弱引用，因此当它是某个对象的仅存引用时，也不会屏蔽垃圾回收。当键被回收之后，所关联的值也同时从 Weak Map 中被移除。
  
Promise
Class

Proxy拦截

新增了一些数组的方法

find();查找数组某个元素
findIndex();查找某个元素的索引值
some();数组中是否有元素符合条件
every();数组中是否所有的元素都符合条件

Object.assign(); 复制一个对象
Object.keys(); 得到一个对象的所有属性；
Object.values(); 得到一个对象的所有可枚举属性值；
Object.entries(); 得到一个对象的键值对数组；
Object.fromEntries(); entries的逆操作；

新增了一些对象的方法






css：
盒子模型：
W3C标准模型 
IE模型

1 box-sizing属性？

用来控制元素的盒子模型的解析模式，默认为content-box
context-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽
border-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽

Webpack优化

Webpack优化可以分为优化开发体验和优化输出质量两部分

前端性能优化

1.资源压缩合并，减少http请求
2.非核心代码异步加载
3.利用浏览器缓存 
 1. 强缓存 强缓存是利用 http 响应头中的Expires或Cache-Control实现的。【重要】 (response Headers)  Cache-Control （max-age）相对时间  Expires 绝对时间
 2. 协商缓存
 •第一对：Last-Modified、If-Modified-Since
 •第二对：ETag、If-None-Match
		获取资源形式	  状态码         发送请求到服务器
 强缓存	 从缓存取	 200（from cache）	         否，  直接从缓存取
 协商缓存	 从缓存取	 304（not modified）	是，   正如其名，通过服务器来告知缓存是否可用
4. 使用CDN
5.DNS预解析（dns-prefetch）
通过 DNS 预解析来告诉浏览器未来我们可能从某个特定的 URL 获取资源，当浏览器真正使用到该域中的某个资源时就可以尽快地完成 DNS 解析。

第一步：打开或关闭DNS预解析

你可以通过在服务器端发送 X-DNS-Prefetch-Control 报头。或是在文档中使用值为 http-equiv 的meta标签：

	<meta http-equiv="x-dns-prefetch-control" content="on">
需要说明的是，在一些高级浏览器中，页面中所有的超链接（<a>标签），默认打开了DNS预解析。但是，如果页面中采用的https协议，很多浏览器是默认关闭了超链接的DNS预解析。如果加了上面这行代码，则表明强制打开浏览器的预解析。（如果你能在面试中把这句话说出来，则一定是你出彩的地方）

第二步：对指定的域名进行DNS预解析

如果我们将来可能从 smyhvae.com 获取图片或音频资源，那么可以在文档顶部的 标签中加入以下内容：

	<link rel="dns-prefetch" href="http://www.smyhvae.com/">


编码优化
1.减少 cookie 体积:
2.dom 优化:
	减少重绘与回流

v-model原理
<input v-model="msg" />
等价于 <input :value="msg" @input="msg=$event.target.value" />



手写 promise.all
Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，
成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值

let p1 = new Promise((resolve, reject) => {
  resolve('成功了')
})

let p2 = new Promise((resolve, reject) => {
  resolve('success')
})

let p3 = Promse.reject('失败')

Promise.all([p1, p2]).then((result) => {
  console.log(result)               //['成功了', 'success']
}).catch((error) => {
  console.log(error)
})

Promise.all([p1,p3,p2]).then((result) => {
  console.log(result)
}).catch((error) => {
  console.log(error)      // 失败了，打出 '失败'
})


promise async/wait  区别
1.提案版本不同：Promise是ES6的新特性，async、await是ES7中的提案
2.代码简洁度：使用async函数可以让代码简洁很多；promise中，try/catch 不能处理 JSON.parse 的错误，因为它在Promise中。我们需要使用 .catch，这样错误处理代码非常冗余。

错误调试：Async/Await 让 try/catch 可以同时处理同步和异步错误。如果 Promise 连续调用，对于错误的处理是很麻烦的。你无法知道错误出在哪里。
不能在返回表达式的箭头函数中设置断点
如果你在.then代码块中设置断点，使用Step Over快捷键，调试器不会跳到下一个.then，因为它只会跳过异步代码。
使用await/async时，你不再需要那么多箭头函数，这样你就可以像调试同步代码一样跳过await语句。



Options API 和 Composition API 的对比

vue2中的Options API
在vue2中，我们会在一个vue文件中methods，computed，watch，data中等等定义属性和方法，共同处理页面逻辑，我们称这种方式为Options API

vue3中的Composition API(组合API)就是用来解决这个问题的
在vue3 Composition API 中，我们的代码是根据逻辑功能来组织的，一个功能所定义的所有api会放在一起（更加的高内聚，低耦合），这样做，即时项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有API，而不像vue2 Options API 中一个功能所用到的API都是分散的，需要改动功能，到处找API的过程是很费劲的



1.key 的主要作用是高效的更新虚拟dom

$route是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。
$router是“路由实例”对象包括了路由的跳转方法，钩子函数等。 go() replace() push()

路由懒加载
1.异步技术 { path: '/home', name: 'home', component: resolve => require(['@/components/home'],resolve) },
2.import技术 const Index = () => import('@/components/index')



Computed和Watch的区别
1.computed 计算属性 : 依赖其它属性值,并且 computed 的值有缓存,只有它依赖的 属性值发生改变,下一次获取 computed 的值时才会重新计算 computed 的值。
2.watch 侦听器 : 更多的是观察的作用,无缓存性,类似于某些数据的监听回调,每 当监听的数据变化时都会执行回调进行后续操作。
运用场景：

1.当我们需要进行数值计算,并且依赖于其它数据时,应该使用 computed,因为可以利用 computed 的缓存特性,避免每次获取值时,都要重新计算。
2.当我们需要在数据变化时执行异步或开销较大的操作时,应该使用 watch,使用 watch 选项允许我们执行异步操作 ( 访问一个 API ),限制我们执行该操作的频率, 并在我们得到最终结果前,设置中间状态。这些都是计算属性无法做到的。
3.多个因素影响一个显示，用Computed；一个因素的变化影响多个其他因素、显示，用Watch;

1.18. Vue.js页面闪烁
Vue. js提供了一个v-cloak指令，该指令一直保持在元素上，直到关联实例结束编译。当和CSS一起使用时，这个指令可以隐藏未编译的标签，直到实例编译结束。用法如下。

[v-cloak]{ 
 display:none; 
} 
<div v-cloak>{{ title }}</div>


如何解决数据层级结构太深的问题
span 'v-text="a.b.c.d"></span>, 可以使用vm.$set手动定义一层数据: vm.$set("demo"，a.b.c.d)

Vue 2 中给 data 中的对象属性添加一个新的属性时会发生什么？如何解决？

视图并未刷新。这是因为在Vue实例创建时，新属性并未声明，因此就没有被Vue转换为响应式的属性，自然就不会触发视图的更新，
这时就需要使用Vue的全局 api $set()：this.$set(this.obj, 'new_property', 'new_value')

2.3. keep-alive是什么？
如果需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。

两个重要属性，include 缓存组件名称，exclude 不需要缓存的组件名称。

1.26. 组件传值方式有哪些
1.父传子：子组件通过props['xx'] 来接收父组件传递的属性 xx 的值
2.子传父：子组件通过 this.$emit('fnName',value) 来传递,父组件通过接收 fnName 事件方法来接收回调
3.其他方式：通过创建一个bus，进行传值  $emit 传值  $on 接收值   事件总线
4.使用Vuex

props、$emit/$on、vuex、$parent / $children、$attrs/$listeners和provide/inject，


assets与static的区别

assets中的文件会经过webpack打包，重新编译，推荐该方式。而static中的文件，不会经过编译。项目在经过打包后，会生成dist文件夹，
static中的文件只是复制一遍而已。简单来说，static中建议放一些外部第三方，自己的放到assets，别人的放到static中。

项目中引用图片 或者背景

backgroundImgUrl: require('@/assets/login-bg.png')     // 也可用~@ 代码@

<!-- 在img标签中可以直接使用backgroundImgUrl变量作为图片路径 -->
<img :src="backgroundImgUrl">
<!-- 在style中要把backgroundImgUrl变量拼接到url()中，才能正常引入图片 -->
<div :style="{ backgroundImage: `url(${backgroundImgUrl})` }"></div>   //${变量} 将变量引入到字符串中


v-bind class  对象语法 以及数组语法
v-bind style 对象语法 以及数组语法

闭包一定是一个函数对象  能保持对上层函数的作用域

let  const  开发过程中优先使用const 只有定义的标识符需要修改的时候才用 let  如定义的const的标识符被再次赋值 就会报错； 且定义const的标识符时必须赋值
var 没有作用域
let 变量 有作用域
const  常量  有作用域 不能再次赋值 定义的同时必须赋值 const定义的对象不能修改 但是对象内部的属性可以修改；


说说Vue原理
Vue是采用数据劫持配合发布者-订阅者模式，通过Object.defineProperty来劫持各个属性的getter和setter
在数据发生变化的时候，发布消息给依赖收集器，去通知观察者，做出对应的回调函数去更新视图。

vue是一个典型的MVVM框架，模型Model是js对象，修改它则视图VIEW自动更新。
vue实现双向数据绑定，需要三大模块：
Observer:能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者
Compile:对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定想要的更新函数
Watcher:作为链接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图。

vue路由守卫有哪些，怎么设置，使用场景等

常用的两个路由守卫：router.beforeEach 和 router.afterEach
组件内部使用
beforeRouteEnter:
beforeRouteLeave：

每个守卫方法接收三个参数：

to: Route: 即将要进入的目标 路由对象

from: Route: 当前导航正要离开的路由

next: Function: 一定要调用该方法来 resolve 这个钩子。

在项目中，一般在beforeEach这个钩子函数中进行路由跳转的一些信息判断。
判断是否登录，是否拿到对应的路由权限等等

数组去重
第一种： 通过ES6新特性Set()
例如： var arr = [1, 2, 3, 1, 2]; var newArr= [...new Set(arr)]

实现instanceOf
function instanceOf(left, right) {
    let leftValue = left.__proto__;
    let rightValue = right.prototype;
    while (true) {
        if (leftValue === null) {
            return false;
        }
        if (leftValue === rightValue) {
          return true;
        }
    leftValue = leftValue.__proto__;
   }
}




说一说什么是跨域，怎么解决

因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。
为来防止CSRF攻击
1.JSONP
    JSONP 的原理很简单，就是利用 <script> 标签没有跨域限制的漏洞。
    通过 <script> 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。
    <script src="http://domain/api?param1=a&param2=b&callback=jsonp"></script>
    <script>
        function jsonp(data) {
        	console.log(data)
    	}
    </script>
    JSONP 使用简单且兼容性不错，但是只限于 get 请求。
2.CORS
    CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。
3.document.domain
    该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。

    只需要给页面添加 document.domain = 'test.com' 表示二级域名都相同就可以实现跨域
4.webpack配置proxyTable设置开发环境跨域
5.nginx代理跨域
6.iframe跨域
7.postMessage
    这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息

说一说SessionStorage和localStorage还有cookie

共同点：都是保存在浏览器端、且同源的
不同点：
    1.cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。
    cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下
    sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。
    2.存储大小限制也不同，cookie数据不能超过4K，sessionStorage和localStorage可以达到5M
    3.sessionStorage：仅在当前浏览器窗口关闭之前有效；
    localStorage：始终有效，窗口或浏览器关闭也一直保存，本地存储，因此用作持久数据；
    cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭
    4.作用域不同
    sessionStorage：不在不同的浏览器窗口中共享，即使是同一个页面；
    localstorage：在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在
    cookie: 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在

5.diff算法
    vue中diff算法实现流程：
        1.在内存中构建虚拟dom树
        2.将内存中虚拟dom树渲染成真实dom结构
        3.数据改变的时候，将之前的虚拟dom树结合新的数据生成新的虚拟dom树
        4.将此次生成好的虚拟dom树和上一次的虚拟dom树进行一次比对(diff算法进行比对)，来更新只需要被替换的DOM，
        而不是全部重绘。在Diff算法中，只平层的比较前后两棵DOM树的节点，没有进行深度的遍历。
        5.会将对比出来的差异进行重新渲染
        
    react中diff算法实现流程:
        DOM结构发生改变-----直接卸载并重新create
        DOM结构一样-----不会卸载,但是会update变化的内容
        所有同一层级的子节点.他们都可以通过key来区分-----同时遵循1.2两点
        (其实这个key的存在与否只会影响diff算法的复杂度,换言之,你不加key的情况下,
        diff算法就会以暴力的方式去根据一二的策略更新,但是你加了key,diff算法会引入一些另外的操作)

Proxy 相比于 defineProperty 的优势
	数组变化也能监听到
	不需要深度遍历监听

Object.defineProperty() 的问题主要有三个：
不能监听数组的变化
必须遍历对象的每个属性
必须深层遍历嵌套的对象    
	
	
virtual dom 原理实现

创建dom树
树的diff,同层对比，输出patches(listDiff/diffChilder/diffProps)

		没有新节点，返回
		新的节点tagName与key不变，对比props,继续递归遍历子树
		对比属性(对比新旧属性列表)
		旧属性是否存在与新属性列表中
		都存在的是否有变化
		是否出现旧列表中没有的新属性
		tagName和key值变化了，则直接替换成新节点
		渲染差异

遍历patches，把需要更改的节点取出来
局部更新dom

代码的复用
当你发现任何代码开始写第二遍时，就要开始考虑如何复用。一般有以下的方式:

函数封装
继承
复制extend
混入mixin
借用apply/call


require与import的区别

require支持 动态导入，import不支持，正在提案 (babel 下可支持)
require是 同步 导入，import属于 异步 导入
require是 值拷贝，导出值变化不会影响导入值；import指向 内存地址，导入值会随导出值而变化


apply和call

apply和call都是改变this指向功能一样，
只是传入的参数列表形式不同：如 func.call(func1,var1,var2,var3)   对应的apply写法为：func.apply(func1,[var1,var2,var3])

浏览器下事件循环(Event Loop)
事件循环是指: 执行一个宏任务，然后执行清空微任务列表，循环再执行宏任务，再清微任务列表

微任务 microtask(jobs): promise / ajax
宏任务 macrotask(task): setTimout / script / IO / UI Rendering

从输入URL到网页呈现的过程
1.从内存中读取dns
2.解析DNS
3.TCP 三次握手
		第一次握手：建立连接时，客户端向服务端发送请求报文
		第二次握手：服务器收到请求报文后，如同意连接，则向客户端发送确认报文
		第三次握手，客户端收到服务器的确认后，再次向服务器给出确认报文，完成连接。
4.浏览器发送请求
5服务器处理请求
6.渲染页面
	页面渲染的过程 
	1.下载html文档
	2.解析html文档并生成dom树
	3.解析dom树 
7.断开连接  四次挥手
		第一次挥手：客户端想分手，发送消息给服务器
		第二次挥手：服务器通知客户端已经接受到分手请求，但还没做好分手准备
		第三次回收：服务器已经做好分手准备，通知客户端
		第四次挥手：客户端发送消息给服务器，确定分手，服务器关闭连接
TCP 连接三次握手  断开 四次挥手
2.2 三次握手过程分析：
第一次：客户端发送请求到服务器，服务器知道客户端发送，自己接收正常。SYN=1,seq=x
第二次：服务器发给客户端，客户端知道自己发送、接收正常，服务器接收、发送正常。ACK=1,ack=x+1,SYN=1,seq=y
第三次：客户端发给服务器：服务器知道客户端发送，接收正常，自己接收，发送也正常.seq=x+1,ACK=1,ack=y+1
（上面分析过程可以看出，握手两次达不到让双方都得出自己、对方的接收、发送能力都正常的结论的。）

 第一次：客户端请求断开FIN,seq=u
 第二次：服务器确认客户端的断开请求ACK,ack=u+1,seq=v
 第三次：服务器请求断开FIN,seq=w,ACK,ack=u+1
 第四次：客户端确认服务器的断开ACK,ack=w+1,seq=u+1
 
 1为什么三次握手和四次挥手？
 三次握手时，服务器同时把ACK和SYN放在一起发送到了客户端那里
 四次挥手时，当收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方 ACK 和 FIN 一般都会分开发送。

 HTTP与HTTPS的区别( 握手的过程 )
 HTTP： 直接通过明文在浏览器和服务器之间传递信息。
 https  加密后的http   ssl+http  
 
 1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。
 2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。
 3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
 4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。
 
 Websocket 是一个 持久化的协议， 基于 http ， 服务端可以 主动 push
 
 xss 跨站脚本攻击 cross site script
 csrf  跨站请求伪造 cross-site request forgery
 
 防御CSRF攻击：
 1 验证 HTTP Referer 字段
 2.在请求地址中添加 token 并验证
 3.请求头中自定义属性验证 token  现在的登录token验证（最好的）
 
 Promise 的声明
 
 一个叫resolve（成功），一个叫reject（失败）。
 Promise存在三个状态（state）pending、fulfilled、rejected
 pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）
 成功时，不可转为其他状态，且必须有一个不可改变的值（value）
 失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）
 
 Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因
 当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason
 onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数
 
 let p1 = new Promise((resolve,reject) => {
	 resolve('value')
	 reject('reason')
 })
 
 p1.then((value)=>{
	 console.log("成功回调"+value)
 },(reason)=>{
	 console.log("失败回调"+reason)
 })
 
 js 防抖和节流
 /*****************************简化后的分割线 ******************************/
// 防抖
function debounce(fn, wait) {    
    var timeout = null;    
    return function() {        
        if(timeout !== null)   clearTimeout(timeout);        
        timeout = setTimeout(fn, wait);    
    }
}
// 处理函数
function handle() {    
    console.log(Math.random()); 
}
// 滚动事件
window.addEventListener('scroll', debounce(handle, 1000));
 
 对于短时间内连续触发的事件（上面的滚动事件），防抖的含义就是让某个时间期限（如上面的1000毫秒）内，事件处理函数只执行一次。
 
 总结：
 函数防抖：将多次操作合并为一次操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。
 
 函数节流：使得一定时间内只触发一次函数。原理是通过判断是否有延迟调用函数未执行。
 
 区别： 函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。
 
 
 function throttle(fn,delay){
     let valid = true
     return function() {
        if(!valid){
            //休息时间 暂不接客
            return false 
        }
        // 工作时间，执行函数并且在间隔期内把状态位设为无效
         valid = false
         setTimeout(() => {
             fn()
             valid = true;
         }, delay)
     }
 }
 /* 请注意，节流函数并不止上面这种实现方案,
    例如可以完全不借助setTimeout，可以把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定。
    也可以直接将setTimeout的返回的标记当做判断条件-判断当前定时器是否存在，如果存在表示还在冷却，并且在执行fn之后消除定时器表示激活，原理都一样
     */
 
 // 以下照旧
 function showTop  () {
     var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
 　　console.log('滚动条位置：' + scrollTop);
 }
 window.onscroll = throttle(showTop,1000)
 
 方法2：
 // 节流throttle代码（时间戳+定时器）：
 var throttle = function(func, delay) {     
     var timer = null;     
     var startTime = Date.now();     
     return function() {             
         var curTime = Date.now();             
         var remaining = delay - (curTime - startTime);             
         var context = this;             
         var args = arguments;             
         clearTimeout(timer);              
         if (remaining <= 0) {                    
             func.apply(context, args);                    
             startTime = Date.now();              
         } else {                    
             timer = setTimeout(func, remaining);              
         }      
     }
 }
 function handle() {      
     console.log(Math.random());
 } 
 window.addEventListener('scroll', throttle(handle, 1000));
 
 
 
 
 
 js 排序
 
 sort()
 reverse() 反向排序 
 冒泡排序 //每轮依次比较相邻两个数的大小，后面比前面小则交换
 //每轮依次比较相邻两个数的大小，后面比前面小则交换
 var b=0//设置用来调换位置的值
 var a=[1,9,33,2,5,34,23,98,14]//冒泡排序
 for(var i=0;i<a.length;i++){
     for(var j=0;j<a.length;j++){
         if(a[j]>a[j+1]){
             b=a[j]
             a[j]=a[j+1]
             a[j+1]=b
         }
     }
 }
 console.log(a)//[1, 2, 5, 9, 14, 23, 33, 34, 98]
 选择排序
 选择排序/打擂台法：
 规律：通过比较首先选出最小的数放在第一个位置上，然后在其余的数中选出次小数放在第二个位置上,依此类推,直到所有的数成为有序序列。
 var arr = [9, 8, 7, 6, 5, 4];
 //用选择排序的方法从小到大排列数组元素。
 
 //比较的轮数
 for(var i = 0; i < arr.length - 1; i++){
 //每轮比较的次数
 　　for(var j = i + 1; j < arr.length; j++){
 　　　　if(arr[i] > arr[j]){
 　　　　　　var tmp = arr[i];
 　　　　　　arr[i] = arr[j];
 　　　　　　arr[j] = tmp;
 　　　　}
 　　}
 }
 
 alert(arr);//4,5,6,7,8,9
 快速排序
 function quickSort(arr, i, j) {
   if(i < j) {
     let left = i;
     let right = j;
     let mid = Math.floor((left+right)/2);
     let temp = arr[left];
     arr[left] = arr[mid];
     arr[mid] = temp;
     let pivot = arr[left];
     while(i < j) {
       while(arr[j] >= pivot && i < j) {  // 从后往前找比基准小的数
         j--;
       }
       if(i < j) {
         arr[i++] = arr[j];
       }
       while(arr[i] <= pivot && i < j) {  // 从前往后找比基准大的数
         i++;
       }
       if(i < j) {
         arr[j--] = arr[i];
       }
     }
     arr[i] = pivot;
     quickSort(arr, left, i-1);
     quickSort(arr, i+1, right);
     return arr;
   }
 }
 插入排序
 
 判断 true false
  0  NAN false  undefined null ''  ---------- false
  
  内存泄露
  意外的全局变量: 无法被回收
  定时器: 未被正确关闭，导致所引用的外部变量无法被释放
  事件监听: 没有正确销毁 (低版本浏览器可能出现)
  闭包: 会导致父级中的变量无法被释放
  dom 引用: dom 元素被删除时，内存中的引用未被正确清空
 
 JS数据类型
 JS基本有5种简单数据类型：String，Number，Boolean，Null，Undefined。引用数据类型：Object，Array，Function。
 
 判断数据类型的方法
 console.log(typeof 2);               // number
 console.log(typeof true);            // boolean
 console.log(typeof 'str');           // string
 console.log(typeof undefined);       // undefined
 console.log(typeof []);              // object 
 console.log(typeof {});              // object
 console.log(typeof function(){});    // function
 console.log(typeof null);            // object
 
 1. typeof  能够快速区分基本数据类型 缺点：不能将Object、Array和Null区分，都返回object
 
 console.log(2 instanceof Number);                    // false
 console.log(true instanceof Boolean);                // false 
 console.log('str' instanceof String);                // false  
 console.log([] instanceof Array);                    // true
 console.log(function(){} instanceof Function);       // true
 console.log({} instanceof Object);                   // true
  
 2. instanceof 能够区分Array、Object和Function，适合用于判断自定义的类实例对象 缺点：Number，Boolean，String基本数据类型不能判断
 
 3. Object.prototype.toString.call() 精准判断数据类型 缺点：写法繁琐不容易记，推荐进行封装后使用
 var toString = Object.prototype.toString;
  
 console.log(toString.call(2));                      //[object Number]
 console.log(toString.call(true));                   //[object Boolean]
 console.log(toString.call('str'));                  //[object String]
 console.log(toString.call([]));                     //[object Array]
 console.log(toString.call(function(){}));           //[object Function]
 console.log(toString.call({}));                     //[object Object]
 console.log(toString.call(undefined));              //[object Undefined]
 console.log(toString.call(null));                   //[object Null]
 
 null和undefined区别
 
 Undefined类型只有一个值，即undefined。当声明的变量还未被初始化时，变量的默认值为undefined。
 Null类型也只有一个值，即null。null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。
 
 闭包的理解
 
 简单来说闭包就是在函数里面声明函数，本质上说就是在函数内部和函数外部搭建起一座桥梁，使得子函数可以访问父函数中所有的局部变量， 但是反之不可以，这只是闭包的作用之一，
 另一个作用，则是保护变量不受外界污染，使其一直存在内存中，在工作中我们还是少使用闭包的好，因为闭包太消耗内存，不到万不得已的时候尽量不使用。
 
 
 一个HTTPS请求实际上包含了两次HTTP传输，可以细分为8步。
 1.客户端向服务器发起HTTPS请求，连接到服务器的443端口
 
 2.服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。
 
 3.服务器将自己的公钥发送给客户端。
 
 4.客户端收到服务器端的证书之后，会对证书进行检查，验证其合法性，如果发现发现证书有问题，那么HTTPS传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性，关于客户端如何验证数字证书的合法性，
 下文会进行说明。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS中的第一次HTTP请求结束。
 
 5.客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。
 
 6.服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。

7.然后服务器将加密后的密文发送给客户端。

8.客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。


深拷贝
JSON.parse(JSON.stringify(obj))
 
 二。项目中遇到的问题以及难点
 1.vue-router  mode :history   配置上线上，出现刷新 按回车 404错误 (需要后台配合配置)
 2.路由嵌套的问题： 就是在子页面实现router-view   路由配置的时候需要配置在 children数组里面
 3.解决整个项目的数据刷新问题  使用[provide/inject]实现刷新
	this.$router.go(0); location.reload() 
	//这两种方式都相当于f5刷新，页面会有卡顿，白屏的情况，用户体验极差
	<router-view v-if="isRouterAlive"/>
	provide () {
	    return {
	      reload: this.reload
	    }
	},
	data () {
	    return {
	      isRouterAlive: true
	    }
	  },
	methods: {
	    reload () {
	      this.isRouterAlive = false
	      this.$nextTick(function () {
	        this.isRouterAlive = true
	      })
	    }
	  }
	
	子组件
	inject:['reload'],
	methods: {
	addItem(){
	//处理添加逻辑成功之后调用刷新
	this.reload（）
	},
	}
	
4.单页面设置  vue-wechat-title
一般做法：

router.beforeEach((to, from, next) => {
  const title = to.meta && to.meta.title;
  if (title) {
    document.title = title;
  }
  next();
});

下载安装插件依赖
npm install vue-wechat-title --save
在main.js中引入插件
import VueWechatTitle from 'vue-wechat-title' Vue.use(VueWechatTitle)
路由定义(只截取一部分)
const routes = [
  {
    name: 'Home',
    path: '/home',
    meta: {
      title: '首页'
    },
    component: require('../views/Home.vue')
  },

<router-view v-if="isRouterAlive" v-wechat-title='$route.meta.title' />
	
	
5. 路由异步加载
 普通方式   是直接import
 
异步{
       path: '/Home',
       name: 'Home',
       component: () => import('./views/Home.vue'),
       meta: {
         title: '首页'
       }
     }
6.watch监听object时，需要进行深度监听，因为vue默认只监听data中的属性一级

vue项目中用v-for 循环本地图片， 图片不显示，
解决办法：1.使用require动态引入图片，
         2.或将图片放static文件夹里面
		 
css引用图片打包后找不到文件资源的问题
build->utils.js ->style-loader  -->publicPath


微信小程序的问题

用到setInterval 时   页面在销毁的时候  记得clearInterval   onHide  onUnload  

利用wxs  完成wxml里面的脚本  用来计算对数据特殊处理；

模块化：

以下便是模块化推荐用法
function add(a,b){
	return a + b
}
export default {add}  //模块化以这种方式导出  引入的时候可以随意更改名字

import sss from '/c1.js' 
sss.add();



webpack
 /**
  *安装命令：
  * npm init -y
  * 全局安装 npm install webpack webpack-cli –g   （不推荐）  
  * 本地安装：npm install webpack webpack-cli --save-dev （推荐）
  * 开发环境配置 让代码运行
  * 运行项目指令：
 	webpack:会将打包结果输出；
 	npx webpack-dev-server 只会在内存中编译打包，没有输出
	webpack打包脚本 webpack 入口文件路径 -c 出口文件路径
	webpack './cs.js' -c './build/'
  */

modules.exports = {
	entry:'./src/js/index.js',
	output:{
		filename:'js/built.js',
		path:resolve(__dirname,'build')
	},
	module:{
		//处理图片资源
		{
			test:/\.(jpg|png|gif)/,
			loader:['url-loader'],
			options:{
				limit:8*1024,
				name:[hash:10].[ext],
				esModule:false,
				outputpath:'imgs'
			}
		},
		//处理css资源
		{
			test:/\.css$/,
			use:[
				// 'style-loader',//创建style标签 把样式放入
				MiniCssExtractPlugin.loader,//取代style-loader 提取js中的css文件  生成单独的css文件
				'css-loader',
				]
		},
		/**
		 * 正常情况下 一个文件只能执行一个loader处理
			当一个文件要被多个loader处理 那么一定要指定 loader的执行先后顺序  加 enforce:'pre'
			先执行eslint 再执行babel （1.先语法检测再兼容  2.如果先）
		 */
		
		//处理语法检查资源
		{
			/**
			 * 
			 package.json中eslintConfig设置
			 "eslintConfig":{
				 "extend":"airbnb-base"//继续
			 }
			 airbnb --> eslint-config-airbnb-base  eslint-plugin-import    eslint
			 */
			test:/\.js$/,
			exclude:/node_modules/，//不检查第三方的库脚本；
			include:resolve(__dirname,'src'), //只检查src目标下的js文件
			enforce:'pre', //优先执行   post 延后执行
			loader:'eslint-loader'
			options:{
				fix:true//自动修复eslint的错误
			}
		},
		{
			test:/\.js$/,
			exclude:/node_modules/,
			loader:'babel-loader',
			options:[
				{
					'@babel/preset-env',
					{
						//按需加载
						useBuiltIns:'usage',
						//指定core-js版本
						corejs:{
							version:3
						},
						//指定兼容性做到哪个版本浏览器
						targets:{
							chrome:'60',
							firefox:'60',
							ie:'9',
							safari:'10',
							edge:'17'
						}
					}
				}
			]
		},
	},
	plugins:[//插件集
		new HtmlWebpackPlugin({ //此插件生成一个html
			template:'./src/index.html'
		}),
		new MiniCssExtractPlugin({//
			filename:'css/built.css'
		}),
		new OptimizeCssAssetsWebpackPlugin()//压缩css
		
	],
	mode:'development', //生产环境：production
	devServer:{
		contentBase:resolve(__dirname,'build'),
		compress:true,//压缩
		port:3000,
		open:true
	},
	devtool:'inline-source-map', //
	resolve: {//解析模块规则
	  extensions: ['.js', '.vue', '.json'],//配置省略文件路径的后缀名
	  alias: {//配置路径别名
		'vue$': 'vue/dist/vue.esm.js',
		'@': resolve('src'),
		},
   }
}


webpack兼容 一般都是loader 
1. css兼容性处理：postcss --> postcss-loader postcss-preset-env
2. js兼容处理： babel-loader @babel/core
	1.基本的js兼容性处理--》 @babel/preset-env
	  问题：只能转换基本语法， 如promise高级语法不能转换
	2.全部JS兼容处理 --》@babel-polyfill (下载后直接import引入即可)
	  问题：我只要解决部分兼容性问题，但是将所有兼容性代码引入，体积太大了~
	3.需要做兼容性处理的就做：按需加载---》core-js
	{
		test:/\.js$/,
		exclude:/node_modules/,
		loader:'babel-loader',
		options:[
			{
				'@babel/preset-env',
				{
					//按需加载
					useBuiltIns:'usage',
					//指定core-js版本
					corejs:{
						version:3
					},
					//指定兼容性做到哪个版本浏览器
					targets:{
						chrome:'60',
						firefox:'60',
						ie:'9',
						safari:'10',
						edge:'17'
					}
				},
				cacheDirectory:true  //开启babel缓存  第二次构建时，会读取之前的缓存
			}
			
		]
		use:[//执行顺序是自下往上
			// 'style-loader',//创建style标签 把样式放入
			MiniCssExtractPlugin.loader,//取代style-loader 提取js中的css文件  生成单独的css文件
			'css-loader',
			]
	},
文件压缩一般都是插件 plugin
语法检查eslint   eslint-loader   airbnb 代码检查规范   
//eslint-disabled-next-line    执行这条语句;(下一行不执行检查)
webpack默认执行生产环境  也就是 process.env.NODE_ENV === 'production'   生产环境下会自动压缩js代码 

/**
 * HMR hot module replacement  热模块替换/模块热替换
 作用：一个模块发生变化， 只会重新打包这一个模块  极大的提供构建速度
 样式文件： 可以使用HMR功能：因为style-loader内部实现了~
 JS文件： 默认是不能使用HMR功能的--》修改js代码  添加支持HMR功能的代码
 注意：只能对非入口文件的JS进行热模块替换
 if(module.hot){
	 //一旦module.hot为true 说明开启了HMR功能 --》让HMR功能代码生效
	 module.hot.accept('./print.js',function(){
		 //方法会监听print.js的变化  一旦发生变化 其他默认不会重新构建
		 //会执行后面的回调函数
		 print();
	 }) //如果多个js文件发生修改  可以写多个
	 module.hot.accept('./public.js',function(){
	 		 //方法会监听public.js的变化  一旦发生变化 其他默认不会重新构建
	 		 //会执行后面的回调函数
	 		 print();
	 })
 }
 HTML文件：默认是不能使用HMR功能 同时会导致问题： HTML不能热更新了；
 解决：修改entry入口  将HTML文件引入
 */



/**
 * source-map 一种提供源代码到构建后代码映射技术（如果构建代码出错了，通过映射可以追踪代码错误信息）
   [inline-|hidden-|eval-][nosources-|][cheap-[module-]][source-map]
   source-map：外部   错误代码准备信息 和源代码错误位置
   inline-source-map：内部 只生成一个内联souce-map   错误代码准备信息 和源代码错误位置
   hidden-source-map： 外部  错误代码错误原因，但是没有错误位置，不能追踪到源码代码错误 只能提示到构建代码的错误位置
   eval-source-map：内部 每个文件都生成对应的source-map 都在eval   错误代码准备信息 和源代码错误位置
	nosources-source-map ：外部 错误代码准备信息 但没有任何源代码信息
	cheap-source-map:外部 错误代码准备信息 和源代码错误位置  错误信息只精确到‘行’ 不会提示到哪一列
	cheap-module-source-map:外部 错误代码准备信息 和源代码错误位置 会将loader的source map加入
 */

开发环境：速度快 调试更友好 eval-source-map(推荐) /  eval-cheap-module-source-map
速度快（eval>inline>cheap>...） eval-cheap-source-map eval-source-map 
 调试更友好 souce-map  cheap-module-source-map  cheap-source-map
生产环境:源代码要不要隐藏 调试要不要更友好
内联会让体积变大 所以生产环境不用内联
nosources-source-map  全部隐藏
hidden-source-map  只隐藏源代码  会提示构建后代码
source-map（生产推荐）

##生产环境性能优化
1.打包性能优化

oneof[] //一个只会匹配一个  注意：不能有两个配置处理同一个类型文件；  提升构建速度 


缓存：
1.babel缓存   第二次构建更快
cacheDirectory:true  //开启babel缓存  第二次构建时，会读取之前的缓存
2. 文件资源缓存
   1.hash ：每次webpack打包都会生成唯一的hash值
     问题： 因为js css同时使用一个hash值  如果重新打包  会导致缓存失效（只能我只修改了一个CSS文件 JS跟着缓存失效）
   2.chunkhash: 根据chunk生成的hash值 如果打包来源于同一个chunk   那么hash值是一样的；
    问题：js 和css的值还是一样；  因为CSS是在JS中被引入的  所以同属于一个chunk
   3.contenthash 根据内容生成不一样的hash值  不同文件的hash值一定不一样； 
	--》让代码上线  缓存更好使用
	
	
tree shaking '树摇':去除无用代码    
前提：1.必须使用es6模块化 2.开启production环境
作用：减少代码体积
在package.json中配置
sideEffects:false  所有代码都没有副作用 （都可以进行 tree shaking）
   问题： 可能会把css /@babel/polyfill(副作用)文件干掉
   "sideEffects":['*.css','*.less']  // 标记为没有副作用的代码 css less sass等等
 
 
  代码分割 code split
/**
 * 1可以将node_modules中代码单独打包一个chunk最终输出
   2.自动分析多入口chunk中， 有没有公共的文件 如果有会打包成单独一个chunk
 */
optimization:{
		splitChunks:{
			chunks:'all'
		}
	},
	
	/**
	 *3. import 动态导入语法；  能将某个文件单独打包
	 webpackChunkName:'text'  给单独打包的文件 取固定的名字
	 */
	import(/*webpackChunkName:'text'*/'./test').then((result)=> {
		console.log(result)
	})
	
	js懒加载
	//懒加载  当文件需要使用时才加载
	 document.getElementById('btn').onclick = function(){
		 import(/*webpackChunkName:'text',webpackPrefetch:true*/'./test').then((result)=> {
		 	console.log(result)
		 })
	 }
	 //预加载  webpackPrefetch:true   会在使用之前 提前加载js文件  有兼容性的问题
	 //正常加载可以认为并行加载（同一时间加载多文件） 
	 //预加载 prefrech: 等其他资源加载完毕  浏览器空闲了 再偷偷加载资源
	 
	 
	 PWA 激进式网络开发应用程序（离线可访问）workbox-webpack-plugin
	 
	 thread-loader //开启多进程打包
	 
	 externals: webpack打包忽略插件，采用cdn方式引入  在入口文件处引入cdn文件地址；
	<script src="https://cdn.bootcss.com/vue/2.5.2/vue.min.js"></script>
	<script src="https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"></script>
	<script src="https://cdn.bootcss.com/axios/0.18.0/axios.min.js"></script>
	 externals: {
		'vue': 'Vue',
		'vue-router': 'VueRouter',
		'axios': 'axios',
		'element-ui': 'element-ui',
		'i18n': 'i18n',
	},
	
	dll:动态链接库；  对某些库进行单独打包（jquery  reac  vue 等第三方库）；
	新建webpack.dll.js  
	webpack 默认查找webpack.config.js文件  
	运行指令  webpack --config webpack.dll.js
	module.exports = {
		entry:{
			//最终打包生成的[name] -- jquery
			//['jquery'] -- 要打包的库是jquery
			jquery:['jquery']
		},
		output:{
			filename:'[name],js'
			path:resolve(__dirname,'dll'),
			library:'[name]_[hash]'//暴露出去的内容叫什么名字  比如一个jquery库   整个库向外暴露的变量名 var jquery =
		},
		plugins:[
			//打包生成一个manifest.json -->提供和jquery映射
			new webpack.DllPlugin({
				name:'[name]_[hash]',//映射库的暴露的内容名称
				path:resolve(__dirname,'dll/manifest.json')//输出文件路径
			})
		]，
		mode:'production'
	}
	
	webpack.config.js  plugin中的设置 
	引入webpack
	plugins:[
		//告诉哪些库不需要参与打包 同时使用的名字也要变
		new webpack.DllRefercePlugin({
			manifest:resolve(__dirname,'dll/manifest.json')
		}),
		//将某个文件打出输出去 并在html中自动导入该资源
		new AddAssetHtmlWebpackPlugin({
			filepath:resolve(__dirname,'dll/manifest.json')
		})
	]
	
	
	webpack 性能优化总结：
	
	
	webpack性能优化
	1.开发环境性能优化
	2.生产环境性能优化
	
	##开发环境性能优化
	1.优化打包构建速度
	   1.HMR （css- style-loader   HTML 默认的   JS  module.hot）
	2.调试优化
		source-map(源码和构建代码的映射)  
	
	##生产环境性能优化
	1.优化打包构建速度
		1.oneof 
		2.缓存  babel缓存( cacheDirectory:true  )
		3.多进程打包 （要考虑一个问题 开启一个进程要很长的时间；）
		4.dll   为了让某些库不打包 单独打包
		5.externals 为了让某些库不打包  cdn方式引入外部文件
	2.优化代码运行的性能 
	   1.缓存 （hash-chunkhash- contenthash）
	   2 tree shaking (ES6 MODULE)
	   3.代码分割（code split） optimization  import引入的方式
	   4.js懒加载/预加载 import引入的方式
	   5.pwa 作用：离线访问 缺点 兼容性比较严重
	   
	   
	   
	   需要巩固的点：
	   1.VUEX
	   2.性能优化
	   3.vue原理
	   4.webpack构建工具
	   5.VUE传值 props、$emit/$on、vuex、$parent / $children、$attrs/$listeners和provide/inject
	   常见使用场景可以分为三类：
	   
	   父子通信：
	   父向子传递数据是通过 props，子向父是通过 events（$emit）；通过父链 / 子链也可以通信（$parent / $children）；ref 也可以访问组件实例；provide / inject API；$attrs/$listeners
	   
	   兄弟通信：
	   Bus；Vuex
	   
	   跨级通信：
	   Bus；Vuex；provide / inject API、$attrs/$listeners
	   6.ES6 ES7的区别
	   7.VUE2.0 VUE3.0的区别
	   8.子组件props data的关系 
	   9.宏任务  微任务
	   js 宏任务和微任务
	   .宏任务（macrotask ）和微任务（microtask ）
	   macrotask 和 microtask 表示异步任务的两种分类。
	   在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。
	   
	   1.结论  微任务执行的时机比宏任务来的早( 同步代码先执行 然后再执行异步[微任务先早宏任务])
	   宏任务：setInterval  setTimeout dom事件  ajax请求
	   微任务： promise  async/wait
	   
	   执行顺序 ：微任务--DOM渲染--宏任务
	   10 __proto__  隐式原型 prototype 显式原型  
	    hasOwnProperty  是否在对象自己身上；而不是从父类继承来的；
	   当我们访问一个对象的属性和方法时 	   
	   首先 往自己身上找 如果没有 就会往上一级的对象去
	   
	   

	  
	  首屏加载过慢的问题优化：
	  主要原因是资源请求过多；过大；导致； 所以针对这个优化 就是减少资源请求 且减小文件的大小；
	  1.对于图片： 我们可以使用图片懒加载  小的图片icon 使用字体库代替 小的图片 可以使用雪碧图
	  2对于其他资源 我们可以使用nginx的combo  webpack optimization 物理打包 使资源请求合并   也可以使用懒加载 路由 来动态加载路由来
	  3.对于css/js 可以使用压缩 混淆来减少文件体积； 图片可以使用 图片压缩 base64转换 webp格式转换
	  4.开启gzip压缩全部资源；
	  
	  
	  前端性能优化主要有两个方面：
	  
	  初始阶段--->加载优化
	  运行阶段--->渲染优化
	  一、初始阶段--->加载优化
	  1. 首页加载慢
	  首页加载图片过多：
	  使用懒加载的方法减少首屏图片的加载量（懒加载的原理就是监听滚动条事件，如果满足滚动条距离浏览器顶部的高度===图片距离顶部的高度，将data-src赋值给src）
	  对于小图标可以采用字体图标iconfont的方式解决
	  对于小图片采用精灵图的方式解决
	  首页的请求量过多：
	  通过nginx服务器来做资源文件的合并或者通过webpack等打包工具进行物理打包
	  在代码层面，对于需要引入一些大型三方库的时候，可以通过特定的babel插件来按需加载
	  还可以使用vue lazy、react lazy或其他动态导入的方案来进行前端路由层面的动态加载，减少首页的js和css的大小
	  首页请求的资源过大：
	  CSS和JS可以通过webpack混淆和压缩
	  混淆：将JS代码进行字符串加密（最大程度减少代码量，比如将长变量名变成单个字母）
	  压缩：取出注释空行以及console.log等调试代码
	  压缩图片
	  通过自动化工具压缩图片
	  对图片进行转码--->base64格式
	  使用webP格式
	  通过在服务器端开启gzip进行全部资源压缩
	  2. 实现CDN加速
	  CDN：内容分发网络，放置静态资源（JS CSS 图片等）的服务器
	  
	  CDN是一种解决方案，不是一个实际的东西
	  
	  CDN服务器主要是用来放置静态资源的服务器，可以用来加速静态资源的下载
	  之所以能够加速下载，主要是因为会在很多地方都部署CDN服务器，如果用户需要下载静态资源，会自动选择最近的节点下载
	  另外，由于CDN服务器的地址一般都跟主服务器的地址不同，所以可以破除浏览器对同一个域名发送请求的限制
	  PS1：HTTP1.1请求：对于同一个协议、域名、端口，浏览器允许同时打开最多6个TCP连接（等于说是最多同时发送6个请求）
	  PS2：HTTP2.0：引入了多路复用的机制，可以最大化发送请求数量
	   
	  
	  二、运行阶段--->渲染优化
	  终极目标：减少DOM操作
	  
	  虚拟DOM，用js数据来模拟真实的DOM树，从而大大减少操作真实DOM的次数
	  在渲染的时候，使用document.createDocumentFragment创建虚拟节点，从而避免引起没有必要的渲染
	  采用分段渲染的方式，最后使用window.requestAnimationFrame逐帧渲染
	  例：插入十万条数据如何不卡顿：
	  
	  复制代码
	    // 插入十万条数据
	    const total = 100000;
	    let ul = document.querySelector('ul'); // 拿到 ul
	    
	    // 懒加载的思路 -- 分段渲染
	    // 1. 一次渲染一屏的量
	    const once = 20;
	    // 2. 全部渲染完需要多少次，循环的时候要用
	    const loopCount = total / once;
	   // 3. 已经渲染了多少次
	   let countHasRender = 0;
	   
	   function add() {
	     // 创建虚拟节点，（使用 createDocumentFragment 不会触发渲染）
	     const fragment = document.createDocumentFragment();
	     // 循环 20 次
	     for (let i = 0; i < once; i++) {
	       const li = document.createElement('li');
	       li.innerText = Math.floor(Math.random() * total);
	       fragment.appendChild(li);
	     }
	     // 最后把虚拟节点 append 到 ul 上
	     ul.appendChild(fragment);
	     // 4. 已渲染的次数 + 1
	     countHasRender += 1;
	     loop();
	   }
	   
	   // 最重要的部分来了
	   function loop() {
	     // 5. 如果还没渲染完，那么就使用 requestAnimationFrame 来继续渲染
	     if (countHasRender < loopCount) {
	       // requestAnimationFrame 叫做逐帧渲染
	       // 类似于 setTimeout(add, 16);
	       // 帧：一秒钟播放多少张图片，一秒钟播放的图片越多，动画就约流畅
	       // 1000/60 = 16
	       window.requestAnimationFrame(add);
	     }
	   }
	   loop();
	   
	   
	   你都做过哪些Vue的性能优化？
	   
	   编码阶段
	   尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher
	   v-if和v-for不能连用
	   如果需要使用v-for给每项元素绑定事件时使用事件代理
	   SPA 页面采用keep-alive缓存组件
	   在更多的情况下，使用v-if替代v-show
	   key保证唯一
	   使用路由懒加载、异步组件
	   防抖、节流
	   第三方模块按需导入
	   长列表滚动到可视区域动态加载
	   图片懒加载
	   SEO优化
	   预渲染
	   服务端渲染SSR
	   打包优化
	   压缩代码
	   Tree Shaking/Scope Hoisting
	   使用cdn加载第三方模块
	   多线程打包happypack
	   splitChunks抽离公共文件
	   sourceMap优化
	   用户体验
	   骨架屏
	   PWA
	   还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	